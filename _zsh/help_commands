#!/bin/zsh

# h-* commands

alias h-awk='echo "\
awk '\''{print \$1 \" \" \$1 }'\'' a.sh
"'

alias h-lsof='echo "\
# ポートを使用しているプロセスを特定
lsof -i:80
"'

alias h-rename='echo "\
# 拡張子を一括で変更する
# !! *以下の方法だと、ファイル名にtxtが含まれている場合、そっちもmdに変更されてしまうので注意*
# 例) footxt.txt -> foomd.md
# *.txt -> *.md
rename txt md *.txt

# 以下の2種類の方法を使用すれば拡張子のみを変更できる
# http://d.hatena.ne.jp/lurker/20061120/1163981280
# 1
echo *.html(:r) | xargs -I% -n1 mv %.html %.htm
# 2 (zshのみ)
zmv -W \"*.html\" \"*.htm\"

# プレフィックスをつけることも可能
zmv -W "*" "prefix_*"
"'

alias h-display-backlight='echo "xrandr --output HDMI1 --brightness 0.5"'
alias h-mount='echo "mount -w -o uid=user,iocharset=utf8 /target /mountPoint"'
alias h-mount1='echo "mount -orw,uid=user,utf8 /target /mountPoint"'
alias h-mount2='echo "mount -t cifs -o username=USER //XXX.XXX.XXX.XXX/FILE /mnt/"'

alias h-pacstrap='echo "pacstrap -i -c -d SERVERDIR base base-devel zsh grml-zsh-config vim git openssh tmux"'
alias h-grep-comment="echo \"grep -v -e '^\s*#' -e '^\s*$' FILE.txt\""
alias h-sed-comment="echo \"cat FILE.txt | sed '/^#/d' | sed '/^$/d'\""

alias h-iptables-nat='echo "iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"'
alias h-iptables-redirect='echo "iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000"'
alias h-iptables-redirectip='echo "iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination (IP_ADDR):8000"'
alias h-iptables-portforward='echo "\
iptables -t nat -A PREROUTING -d {OUT_IP} -i {OUT_IF} -p tcp --dport 80 -j DNAT --to DIST_IP
iptables -t nat -A PREROUTING -d {OUT_IP} -i {OUT_IF} -p tcp --dport 5000 -j DNAT --to {DIST_IP}:{DIST_PORT} -m comment --comment \"{COMMENT}\"
iptables -t nat -A PREROUTING -d 10.0.0.1 -i eth1 -p tcp --dport 20080 -j DNAT --to 192.168.0.1:80 -m comment --comment \"spamham comment\"

{OUT_IP}              ; port-forwardするホストのlisten ip
{OUT_IF}              ; port-forwardするホストのinterface
--dport               ; port-forwardするホストが受けるポート
{DIST_IP}:{DIST_PORT} ; port-forward先のIPとポート
"'
alias h-iptables-nspawn='echo "\
# ホストマシンでdockerが動いている状態でsystemd-nspawnコンテナをnatする場合
# かつ、 --network-veth オプションを使用する場合
# dockerがFORWARD PolicyをDropにするため、コンテナのinterfaceを明示的に許可する必要がある。

# ホスト側: natの設定(外部ネットワークが接続されているNIC)
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
# ホスト側: -i -o 両方で許可する設定を入れる
sudo iptables -A FORWARD -i ve-INTERFACE -j ACCEPT
sudo iptables -A FORWARD -o ve-INTERFACE -j ACCEPT
# ホスト側: bridgeに接続する場合は、bridgeのみ許可すればおｋ
# dockerが生成するruleに吸い込まれる場合は1行目に挿入する
sudo iptables -I FORWARD 1 -i br-foo -j ACCEPT
sudo iptables -I FORWARD 1 -o br-foo -j ACCEPT

# ip_forwardの設定も忘れずに
sudo sysctl net/ipv4/ip_forward=1"'

# 出典: http://www.mycurse.net/linux%E3%82%B5%E3%83%BC%E3%83%90%E6%A7%8B%E7%AF%89/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/iptables%E3%81%A7%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92%E3%81%B2%E3%81%A8%E3%81%A4%E5%89%8A%E9%99%A4/
alias h-iptables-rule-delete='echo "\
iptables -D チェイン ルール番号
iptables -L --line-numbers
iptables -D チェイン ルール内容
iptables -D INPUT -p tcp -s 192.168.1.1 --dport ssh -j DROP"'

alias h-gpg='echo "gpg --recv-keys XXXXXXXXXXXXXXXX"'

alias h-ping-mtu='echo "ping -c5 -M do -s 1500 example.com"'

alias h-machinectl-pull-dkr='echo "machinectl pull-dkr --verify=no --dkr-index-url=https://index.docker.io library/os:tag"'
alias h-machinectl-shell='echo "sudo machinectl shell user@container /bin/zsh"'

alias h-tcpdump='echo "tcpdump -n -i eth0 -s 0 -w dumpfile.cap [filter]"'
alias h-eth='echo "sudo ln -s /dev/null /etc/udev/rules.d/80-net-setup-link.rules"'

alias h-tar-rename='echo "\
ls
> hoge-01.txt  huga-02.txt  piyo-03.txt

tar fvcz tar.tar.gz --transform=\"s/-[0-9]\{1,2\}//g\" *

tar tvf tar.tar.gz
> -rw-r--r-- ***/*** 0 2018-10-16 15:36 hoge.txt
> -rw-r--r-- ***/*** 0 2018-10-16 15:36 huga.txt
> -rw-r--r-- ***/*** 0 2018-10-16 15:36 piyo.txt"'

alias h-github-keyword='echo "\
ghkw --in=file --language=python --size=\">1000\" spam ham
<<COMMENT
| RANK | KEYWORD |  TOTAL  |
|------|---------|---------|
|    1 | spam    | 996,100 |
|    2 | ham     | 184,301 |
COMMENT"'

# vim系
alias h-vim-root='echo ":w \!sudo tee % > /dev/null"'
alias h-vim-regexp-br='echo "s/keyword/^M/g | ^M -> ctrl+v ctrl+m"'
alias h-vim-ip-range-insert="echo \":for i in range(1,10) | put ='192.168.0.'.i | endfor'\""
alias h-vim-insert-filename="echo '<C-R>%'"
alias h-vim-del-comment="echo '一致行削除
:%g/^$/d
不一致行削除
:%v/^$/d
空行削除
:g/^$/d'"
alias h-vim-space-1="echo ':%s/ \\+/ /g'"
alias h-vim-clipboard="echo 'copy -> \"+yy'"
alias h-vim-syntax="echo ':set syntax=sshconfig'"
alias h-vim-json="echo '\
:%!python -m json.tool
:Jq
:Jq .obj.list'"

alias h-vim-buffer-completion="echo '\
<C-a> で一致しているものを全部展開してくれる

*.md と入力して<C-a>で以下のように展開される
:bd spam.md ham.md egg.md'"

alias h-vim-sort="echo '\
内部のソート

ask
:sort

desk
:sort!

uniq (重複削除)
:sort u

最初にマッチした数字でソート
:sort n

正規表現でマッチした部分でのみ
:sort /\\\a\\\a\\\a/ r

範囲指定
:1,5sort

大文字小文字を区別しない
:sort i

10、16、8進数
:sort n
:sort x
:sort o

20列目の値を基準にソートする。＋10進数でソートの場合
:sort /\\%20c/
:sort n /\\%20c/

---

外部のsort

区切りを「,」として2番目のフィールドでソートする
:%!sort -t, -k 2,2

3番目のフィールドの値を数値として解釈し、かつ、降順でソートする
:%!sort -t, -k 3,3nr

データを空白文字で区切って、2番目のフィールドの値でソートする
:%!sort -b -k 2,2

区切りを「,」として、3番目のフィールドでソートし、同じであれば、4番目のフィールドでソートする
:%!sort -k 3,3n -k 4,4n

https://qiita.com/rohinomiya/items/f6c175e1f7d529cb15f0
https://qiita.com/jofrnpnp42/items/13187d77f3237bc6dcc3
'"
alias h-vim-plugin-vimfiler='echo "\
https://www.karakaram.com/vimfiler
http://d.hatena.ne.jp/h1mesuke/20100611/p1
---

# カーソル移動

j:  カーソルを下に移動。末尾行では先頭行に移動
k:  カーソルを上に移動。先頭行では末尾行に移動
gg: カーソルを先頭行に移動
G:  カーソルを末尾行に移動

# ディレクトリ移動

l: カーソルのディレクトリを開く
k: ひとつ上のディレクトリを開く
L: ドライブの切替
~: ホームディレクトリを開く
\: ルートディレクトリを開く

# 一覧表示

.:   隠しファイル、フォルダの表示
C-L: ディレクトリの更新
t:   カーソル上のディレクトリの１階層下をツリー形式で表示。ツリー表示を解除
T:   カーソル上のディレクトリをツリー形式で表示。ツリー表示を解除
C-j: ディレクトリの履歴を表示
C-g: ファイル名を表示する
S:   ファイルの並び替え 
C-p,C-n: ヒストリ履歴移動

# ウィンドウの操作

TAB: 別のvimfilerウィンドウへカーソルを移動する。ウィンドウが1つの場合は2つ目のvimfilerウィンドウを開く
q:   vimfilerを隠す(バッファに残る)
Q:   vimfilerを閉じる(バッファに残らない) 

# ファイル操作

a:     アクション一覧を表示
gs:    セーフモード解除
e:     カーソル上のファイルを編集
E:     カーソル上のファイルを縦分割して編集
v:     カーソル上のファイルをプレビューする
Space: カーソル上のファイルにマークをつける・マークをはずす
c:     マークしたファイルをコピー
m:     マークしたファイルを移動
d:     マークしたファイルを削除
r:     マークしたファイルの名前を変更
K:     新規ディレクトリを作成
N:     新規ファイルを作成
*:     すべてのファイルにマークをつける・マークをはずす
U:     すべてのファイルのマークをはずす 
o:     2画面モードにする？ツリーを展開したり戻したり

# その他の便利機能

a:  カーソル上のファイルに対して、様々なアクションを選択して実行
H:  vimshellを開く
ge: vimfiler上のカレントディレクトリを、システムのエクスプローラで開く
x:  カーソル上のファイルを、システムに関連付けされたアプリケーション(コマンド)で実行する
gr: grepコマンドを実行
gf: findコマンドを実行
yy: ファイルのフルパスをyank(コピー)
?:  vimfilerのキーマップ一覧を開く 
"'
alias h-vim-plugin-markdown-table='echo "\
# markdownのテーブルや、インデントの開始位置を揃えてくれるやつ
# - markdownのテーブルの整形
:Alignta |"'

alias h-vim-grep='echo "\
https://qiita.com/yuku_t/items/0c1aff03949cb1b8fe6b

# ファイル指定
:vim[grep] {pattern} {file}

# カレントバッファ
:vim[grep] {pattern} %

# ワイルドカード
:vim[grep] {pattern} foo/bar/**/*.sh

# 繰り返し
# \`##\`がargsで指定したPATHに置き換わる
:ar[gs] path/to/search/dir/**
:vim foo ##
:vim bar ##
:vim baz ##

# Gitリポジトリで使う

# インデックスされている全てのファイルを対象にする
:vim {pattern} \`git ls-files\`
# appディレクトリ内でインデックスされているファイルを対象にする
:vim {pattern} \`git ls-files app\`
# appディレクトリ内でインデックスされている.htmlファイルを対象にする
:vim {pattern} \`git ls-files app/**/*.html\`

# 全bufferを対象にする
:bufdo vimgrep[add] {pattern} %
# 全windowを対象にする
:windo vimgrep[add] {pattern} %
# Quickfixをリセット
:cex[pr] \"\"

# quickfix-window
:cwindow
:vim {pattern} {file} | cw
# quickfix-windowを自動で表示するオプション(tagbarプラギンで設定されている模様)
autocmd QuickFixCmdPost *grep* cwindow"'

# vim END

alias h-ubuntu-network-example='
echo "/etc/network/interfaces
auto eth0
iface eth0 inet static
address 192.168.1.10
netmask 255.255.255.0
gateway 192.168.1.254
dns-nameservers 8.8.8.8 8.8.4.4"'

alias h-ssh-update-known_hosts="echo \"ssh-keygen -f ~/.ssh/known_hosts -R 192.168.1.1\""
alias h-ssh-vpn='echo "sshuttle -r step 192.168.0.0/24"'
alias h-ssh-proxy-command='echo "ProxyCommand ssh -W %h:%p step"'
alias h-scp-by-remote-host-to-remote-host="echo 'ssh -3 remote:/path/to/file remote:/path/tp/file'"

alias h-docker-list-none="echo 'docker images --quiet --filter=dangling=true'"
alias h-docker-build="echo 'docker build --tag=image-name --no-cache .'"
alias h-docker-none-delete="echo 'docker image ls --filter=dangling=true --quiet | xargs docker image rm'"

alias h-cisco-ssh-legacy-options="echo '-oKexAlgorithms=+diffie-hellman-group1-sha1'"
alias h-cisco-config-reset="echo 'erase startup-config
reload
delete flash:vlan.dat'"

alias h-gif="echo 'ffmpeg -i input.mp4 -an -r 15  -pix_fmt rgb24 -f gif output.gif'"

alias h-git-status-current-dir="echo 'git status | \grep -v \"\.\./\"'"
alias h-git-add-p-new-file="echo 'git add -N FILE && git add -p FILE'"

alias h-zsh-grml-zsh-config="echo '\
wget -O ~/.zshrc http://git.grml.org/f/grml-etc-core/etc/zsh/zshrc
curl -L -o ~/.zshrc http://git.grml.org/f/grml-etc-core/etc/zsh/zshrc\
'"

alias h-netcat="echo '\
# File Sender & Port Listen
tar c * | nc -l -p 12345
# File Receiver
nc 192.168.1.1 12345 | tar -x

# File Sender
tar c * | nc 192.168.103.125 12345
# File Receiver & Port Listen
nc -l -p 12345 | tar

# File Sender
cat target.tar.gz | nc 192.168.14.101 12345
# File Receiver & Port Listen
nc -l -p 12345 > target.tar.gz\
'"

alias h-text-行数指定='echo "\
行数指定でcat的な
sed -n 100,200p FILE.txt"'

alias h-deb-unar="echo 'ar vx foo.deb'"
alias h-aur-url='echo "\
https://aur.archlinux.org/packages/PACKAGE
https://aur.archlinux.org/cgit/aur.git/snapshot/PACKAGE.tar.gz
"'

alias h-pyenv-ssl='echo "\
CFLAGS=-I/usr/include/openssl-1.0 \\
LDFLAGS=-L/usr/lib64/openssl-1.0 \\
pyenv install -v 3.6.5"'

### RFC周り

alias h-rfc-keyword='echo "\
[RFC2119]
MUST       | しなければならない
MUST NOT   | してはならない
REQUIRED   | 必須である, 要求されている
SHALL      | するものとする, することになる
SHALL NOT  | しないものとする, することはない
SHOULD     | すべきである, する必要がある
SHOULD NOT | すべきではない, しないほうがよい
RECOMMENDED| 推奨される
MAY        | してもよい
OPTIONAL   | 任意である, 選択できる

用語周りはここ
[RFC4949]
https://tools.ietf.org/html/rfc4949
"'

### systemd-nspawn
alias h-systemd-nspawn-service='echo "\
systemctl edit systemd-nspawn@NAME.service
(/etc/systemd/system/systemd-nspawn@NAME.service.d/override.conf)

Example:
[Service]
ExecStart=
ExecStart=/usr/bin/systemd-nspawn --quiet --keep-unit --boot --link-journal=try-guest --network-veth --bind=/srv/nspawn/share:/share -U --settings=override --machine=%i

Default:
ExecStart=/usr/bin/systemd-nspawn --quiet --keep-unit --boot --link-journal=try-guest --network-veth -U --settings=override --machine=%i

Tips:
--bind で ~/ は使用不可なので、\$HOMEを使用する。"'

### 設定周り
alias h-journald='echo "\
### tty

1.
\`\`\`/etc/systemd/journald.conf.d/fw-tty12.conf
[Journal]
ForwardToConsole=yes
TTYPath=/dev/tty12
MaxLevelConsole=info
\`\`\`

2.
\`\`\`shell
systemctl restart systemd-journald
\`\`\`

### log
mkdir /var/log/journal
"'

alias h-battery='echo "\
/etc/udev/rules.d/99-lowbat.rules

# Suspend the system when battery level drops to 2% or lower
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"10\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"9\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"8\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"7\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"6\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"5\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"4\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"3\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"2\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"1\", RUN+=\"/usr/bin/systemctl suspend\"
SUBSYSTEM==\"power_supply\", ATTR{status}==\"Discharging\", ATTR{capacity}==\"0\", RUN+=\"/usr/bin/systemctl suspend\"\
"'

### Tmux
alias h-tmux-plugin='echo "\
- prefix + I
  - Installs new plugins from GitHub or any other git repository
  - Refreshes TMUX environment
- prefix + U
  - updates plugin(s)
- prefix + alt + u
  - remove/uninstall plugins not on the plugin list

https://github.com/tmux-plugins/tpm#key-bindings
"'

alias h-tmux-session-save='echo "\
prefix + Ctrl-s - save
prefix + Ctrl-r - restore
"'

alias h-xpanes='echo "\
xpanes --ssh foo-0{1..3} bar-0{1..3} baz-0{1..3}
xpanes -c \"sudo machinectl shell USER@{} /bin/zsh\" HOST-0{1..3}\
"'

alias h-bash='echo "\
あとでかく
set -xveu
"'

### ShellScript

alias h-shell-command-exists-check='echo "\
if type COMMAND > /dev/null 2>&1; then
    true
fi

if ! type COMMAND > /dev/null 2>&1; then
    false
fi"'

alias h-shell-is-check='echo "\
if COMMAND > /dev/null 2>&1; then
    true
fi

if ! COMMAND > /dev/null 2>&1; then
    true
fi

Example:
if ! pyenv virtualenvs | \grep openstack > /dev/null 2>&1; then
    echo \"pyenv openstack virtualenv not found\"
fi"'

alias h-shell-test-options='echo "\
あ
と
で
書
く
"'

alias h-shell-while-command='echo "while sleep 1; do sudo iptables -vnL -tnat; done"'

### End ShellScript

### Ansible

alias h-ansible-one-liner='echo "\
\`\`\`hosts
10.0.0.1
10.0.0.2
10.0.0.3

[all:vars]
ansible_sudo_pass=PASSWORD
\`\`\`

ansible all -i hosts -m apt -a \"update_cache=yes upgrade=dist\" --become\
"'

alias h-ansible-local='echo "ansible all -i localhost, -c local -m pacman -a update_cache=yes --become --ask-become-pass"'

alias h-ansible-apt-upgrade='echo "\
# aptitudeが入ってる場合
ansible all -i hosts -m apt -a "update_cache=yes upgrade=yes" --become
# aptitudeが入っていない場合
ansible all -i hosts -m apt -a "update_cache=yes upgrade=dist" --become\
"'

alias h-ansible-ping='echo "\
ansible all -i hosts -m ping\
"'

### End Ansible

### openssl
alias h-openssl-show-crt='echo "\
openssl x509 -text -noout -in example.crt
openssl x509 -text -noout -in ca.crt"'

alias h-openssl-verify='echo "\
openssl verify -CAfile ca.crt target.crt"'

### END openssl

### OpenStack

# network
alias h-opst-network-create='echo "\
openstack network create \\
  --provider-physical-network provider \\
  --provider-network-type vlan \\
  --provider-segment 145 \\
  vlan145\

# native vlanを使用する場合
openstack network create \\
  --external \\
  --provider-physical-network provider \\
  --provider-network-type flat \\
  provider_network

openstack network create vlan145

NOTE: --external オプションはprovider networkの場合は必要ない？\
"'


# subnet
alias h-opst-subnet-create='echo "\
openstack subnet create \\
  --network provider_network \\
  --subnet-range 192.168.1.0/24 \\
  --gateway 192.168.1.254 \\
  --dns-nameserver=8.8.8.8 \\
  --dns-nameserver=8.8.4.4 \\
  --dhcp \\
  --allocation-pool start=192.168.1.150,end=192.168.1.199 \\
  provider_subnet\
"'

# port
alias h-opst-port-create='echo "\
openstack port create \\
  --network=provider_network \\
  --fixed-ip ip-address=192.168.1.151 \\
  #--fixed-ip subnet=provider_subnet,ip-address=192.168.1.151 \\
  192-168-1-151

openstack port create \\
  --allowed-address ip-address=0.0.0.0/0 \\
  --network=provider_network \\
  --fixed-ip ip-address=192.168.1.152 \\
  192-168-1-152

openstack port create \\
  --disable-port-security \\
  --network=provider_network \\
  --fixed-ip ip-address=192.168.1.153 \\
  192-168-1-152\
"'

alias h-opst-port-attach='echo "\
nova interface-attach --port-id={UUID} myserver\

openstack server add port SERVER PORT
"'

alias h-opst-port-list-ip-only='echo "\
openstack port list --network=NETWORK --column=\"Fixed IP Addresses\" --format value | sed \"s/'\'', .*//g\" | sed \"s/ip_address='\''//g\" | sort -V\
"'

alias h-opst-floating-ip='echo "\
# provider_networkというexternalネットワークにfloating ipを作成したい場合
openstack floating ip create --floating-ip-address 192.168.1.100 provider_network

# floating ip をインスタンスに割り当てる
openstack server add floating ip instance-01 192.168.1.100
"'


# image
alias h-opst-image-create='echo "openstack image create --file cirros-0.3.5-x86_64-disk.img --disk-format qcow2 --container-format bare --public cirros"'

# flavor
alias h-opst-flavor-create='echo "\
openstack flavor create --public --vcpus 1 --disk 8 --ram 8096 1-8-8096
"'

# keypair
alias h-opst-keypair-create='echo "\
openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey\
"'

# security group
alias h-opst-security-group='echo "\
openstack security group rule create default --protocol icmp
# openstack security group rule create --proto tcp --dst-port 22 default
openstack security group rule create default --protocol tcp --ingress --prefix 0.0.0.0/0 --dst-port 1:65535
openstack security group rule create default --protocol tcp --egress --prefix 0.0.0.0/0 --dst-port 1:65535
openstack security group rule create default --protocol udp --ingress --prefix 0.0.0.0/0 --dst-port 1:65535
openstack security group rule create default --protocol udp --egress --prefix 0.0.0.0/0 --dst-port 1:65535
openstack security group rule list default
"'

# server
alias h-opst-server-create='echo "\
openstack server create \\
  --image archlinux-cloud \\
  --flavor mini \\
  --security-group default \\
  --nic port-id={UUID} \\
  --nic port-id={UUID} \\
  --nic net-id=public_network,v4-fixed-ip=192.168.1.10 \\
  --config-drive true \\
  --key-name KEY_NAME \\
  arch-server\
"'

alias h-opst-server-suspend-resume='echo "openstack server suspend | openstack server resume"'

alias h-opst-server-delete-multi='echo "openstack server list | \\grep 1-192-168 | awk \"{ print \$2 }\" | xargs openstack server delete"'

alias h-opst-server-delete-all='echo "openstack server list -f value | awk \"{ print $1 }\" | xargs openstack server delete"'

alias h-opst-id-save='echo "\
openstack networ list | tee openstack_network_list
openstack server list | tee openstack_server_list
openstack subnet list | tee openstack_subnet_list
openstack port list | tee openstack_port_list
openstack flavor list | tee openstack_flavor_list
openstack host list | tee openstack_host_list\
"'

# console
alias h-opst-console-url-show='echo "\
openstack console url show SERVER\
"'

# quota
alias h-opst-quota-set='echo "\
openstack quota set --cores 50 admin\
"'

# tips

alias h-opst-list='echo "\
openstack hypervisor list

openstack compute service list\
"'

alias h-opst-show='echo "\
openstack host show compute1\
"'

# selfservice
alias h-opst-selfservice='echo "\
openstack network create  --share \\
  --provider-physical-network provider \\
  --provider-network-type flat provider

openstack subnet create --network provider \\
  --allocation-pool start=START_IP_ADDRESS,end=END_IP_ADDRESS \\
  --dns-nameserver DNS_RESOLVER --gateway PROVIDER_NETWORK_GATEWAY \\
  --subnet-range PROVIDER_NETWORK_CIDR provider

openstack network create selfservice

openstack subnet create --network selfservice \\
  --dns-nameserver DNS_RESOLVER --gateway SELFSERVICE_NETWORK_GATEWAY \\
  --subnet-range SELFSERVICE_NETWORK_CIDR selfservice

openstack router create router1

openstack router set router1 --external-gateway provider
openstack router add subnet router1 selfservice

#neutron router-interface-add router1 selfservice
#neutron router-gateway-set router1 provider

# Verify operation
ip netns
neutron router-port-list router1

###
openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano

ssh-keygen -q -N ""
openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey

openstack security group rule create --proto icmp default
openstack security group rule create --proto tcp --dst-port 22 default
"'

# nested kvm
alias h-nested-kvm='echo "\
$ vi /etc/modprobe.d/kvm-nested.conf
options kvm_intel nested=1

$ modprobe -r kvm_intel

$ modprobe kvm_intel

$ cat /sys/module/kvm_intel/parameters/nested
> Y

$ virsh edit centos7
<cpu mode=\"host-passthrough=\">\
"'

### End OpenStack
