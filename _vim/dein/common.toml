[[plugins]]
# deinのinstallerで生成したvimrcで `Required` となっていたので追加
# 元々は以下
# "call dein#add('/home/USER/dotfiles/_vim/bundles/./repos/github.com/Shougo/dein.vim')
repo = 'Shougo/dein.vim'

[[plugins]]
repo  = 'Shougo/vimproc.vim'
build = 'make'


#--
# unite系
#--

[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo             = 'Shougo/unite.vim'
hook_post_source = '''
    nnoremap [unite] <Nop>
    nmap U [unite]
    nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
    nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
    nnoremap <silent> [unite]r :<C-u>Unite register<CR>
    nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
    nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
    nnoremap <silent> [unite]o :<C-u>Unite outline<CR>
    nnoremap <silent> [unite]t :<C-u>Unite tab<CR>
    nnoremap <silent> [unite]w :<C-u>Unite window<CR>

    " start unite in insert mode
    let g:unite_enable_start_insert = 1
    " use vimfiler to open directory
    call unite#custom_default_action("source/bookmark/directory", "vimfiler")
    call unite#custom_default_action("directory", "vimfiler")
    call unite#custom_default_action("directory_mru", "vimfiler")

    " これhook側で実行させれるきがする
    autocmd MyAutoCmd FileType unite call s:unite_settings()
    function! s:unite_settings()
        imap <buffer> <Esc><Esc> <Plug>(unite_exit)
        nmap <buffer> <Esc> <Plug>(unite_exit)
        nmap <buffer> <C-n> <Plug>(unite_select_next_line)
        nmap <buffer> <C-p> <Plug>(unite_select_previous_line)
    endfunction
'''

[[plugins]]
# ファイル操作
#
# https://twitter.com/ShougoMatsu/status/814072124742606848
# > 後継プラグインがないので正式発表はしてませんが、vimfiler の開発を続ける気はないです。
# > denite.nvimベースのファイラープラグインを作る気ではいます
repo             = 'Shougo/vimfiler'
depends          = ['/unite.vim']
on_cmd           = ['VimFilerTab', 'VimFiler', 'VimFilerExplorer']
# 合ってるか分からん # 元は "autoload": {"mappings": ['<Plug>(vimfiler_switch)']}
on_map           = ['<Plug>(vimfiler_switch)']
# 合ってるか分からん # 元は "autoload": {"explorer": 1}
on_path          = ['.*']
hook_post_source = '''
    nnoremap <silent><C-e> :VimFilerExplorer<CR>
    nnoremap <Leader>e :VimFilerExplorer<CR>

    " close vimfiler automatically when there are only vimfiler open
    autocmd MyAutoCmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif

    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_enable_auto_cd = 1

    " .から始まるファイルおよび.pycで終わるファイルを不可視パターンに
    let g:vimfiler_ignore_pattern = "\%(^\..*\|\.pyc$\)"

    " vimfiler specific key mappings
    autocmd MyAutoCmd FileType vimfiler call s:vimfiler_settings()
    function! s:vimfiler_settings()
        " ^^ to go up
        nmap <buffer> ^^ <Plug>(vimfiler_switch_to_parent_directory)
        " use R to refresh
        nmap <buffer> R <Plug>(vimfiler_redraw_screen)
        " overwrite C-l
        nmap <buffer> <C-l> <C-w>l
    endfunction
'''

#--
# End unite系
#--


[[plugins]]
# http://postd.cc/how-to-boost-your-vim-productivity/#gfm-7
# > 3. 範囲拡大を使う
# > vを押して、1文字を選択する
# > もう1回vを押して、選択範囲を単語に拡大する
# > さらに1回vを押して、選択範囲を段落に拡大する
# > （以下省略）
# > 範囲を拡大しすぎた場合は、<C-v>を押して前回の選択範囲に戻す
repo     = 'terryma/vim-expand-region'
hook_add = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
# jsonのsyntax highlighting
# https://qiita.com/tomoemon/items/cc29b414a63e08cd4f89
repo = 'elzr/vim-json'

[[plugins]]
# markdownのテーブルや、インデントの開始位置を揃えてくれるやつ
# - markdownのテーブルの整形
#   :'<,'>Alignta |
# http://hamuhamu.hatenablog.jp/entry/2015/04/25/000246
repo = 'h1mesuke/vim-alignta'

[[plugins]]
# [vim-precious-の導入でtoml管理が快適に](https://qiita.com/kawaz/items/ee725f6214f91337b42b#vim-precious-%E3%81%AE%E5%B0%8E%E5%85%A5%E3%81%A7toml%E7%AE%A1%E7%90%86%E3%81%8C%E5%BF%AB%E9%81%A9%E3%81%AB)
# これの依存パッケージ
repo = 'Shougo/context_filetype.vim'

[[plugins]]
# > 現在のカーソル位置のコンテキストによって filetype を切り換える為のプラグインです。 - https://github.com/osyo-manga/vim-precious
#
# [vim-precious-の導入でtoml管理が快適に](https://qiita.com/kawaz/items/ee725f6214f91337b42b#vim-precious-%E3%81%AE%E5%B0%8E%E5%85%A5%E3%81%A7toml%E7%AE%A1%E7%90%86%E3%81%8C%E5%BF%AB%E9%81%A9%E3%81%AB)
# > toml の hook_* オプション内にカーソルがあるときだけ、set filetype=vim させることが出来る
repo = 'osyo-manga/vim-precious'
depends = ['/context_filetype.vim']


[[plugins]]
# Fキーの移動を楽にするやつ
# f で検索した後に、ffff で次の文字に移動する
# ! このプラギンがtキーを使っている
repo = 'rhysd/clever-f.vim'
hook_add = '''
    " 大文字と小文字を区別しない
    let g:clever_f_ignore_case = 1

    " 大文字を入力したときのみ大文字と小文字を区別する
    let g:clever_f_smart_case = 1

    " ローマ字読みで日本語を検索する
    let g:clever_f_use_migemo = 1

    " 常にfで前に移動、Fで後ろに移動する
    let g:clever_f_fix_key_direction = 1

    " プロンプトを表示させる(fを押した時に下に `clever-f:` と表示されるやつ)
    let g:clever_f_show_prompt = 1

    " ; キーを全ての記号キーとマッチさせる
    " なんかちゃんと動いてなさそう
    let g:clever_f_chars_match_any_signs = 1
'''


[[plugins]]
# :VimShell
# iexe python
# :VimShellInteractive python
# :VimShellSendString
repo = 'Shougo/vimshell.vim'
hook_add = '''
    " http://nauthiz.hatenablog.com/entry/20101107/1289140518

    " ,is: シェルを起動
    nnoremap <silent> ,is :VimShell<CR>

    " ,ipy: pythonを非同期で起動
    nnoremap <silent> ,ipy :VimShellInteractive python<CR>

    " ,irb: irbを非同期で起動
    nnoremap <silent> ,irb :VimShellInteractive irb<CR>

    " ,ss: 非同期で開いたインタプリタに現在の行を評価させる
    vmap <silent> ,ss :VimShellSendString<CR>

    " 選択中に,ss: 非同期で開いたインタプリタに選択行を評価させる
    nnoremap <silent> ,ss <S-v>:VimShellSendString<CR>
'''


[[plugins]]
# もし colorscheme molokai が not found になる場合は以下を試すこと
# :call dein#add('tomasr/molokai')
# :call dein#recache_runtimepath()
# そもそもplugin/ ディレクトリがないのでlazy出来ない？
# :help lazy に書いてある
repo     = 'tomasr/molokai'
#on_cmd   = ['colorscheme molokai', 'molokai']
hook_add = '''
    "highlight Normal ctermbg=none
    let g:rehash256 = 1
    let g:molokai_original = 1
'''


[[plugins]]
# `:w sudo:%` でrootとして保存
# (`:w ! sudo tee %` が使えなくなったので代替手段)
# https://github.com/neovim/neovim/issues/8527
#
# ```
# " Open a current file with sudo
# :e suda:%
# " Save a current file with sudo
# :w suda:%
# " Edit /etc/sudoers
# :e suda:/etc/sudoers
# " Read /etc/sudoers (insert content under the cursor)
# :r suda:/etc/sudoers
# " Read /etc/sudoers at the end
# :$r suda:/etc/sudoers
# " Write contents to /etc/profile
# :w suda:/etc/profile
# " Save contents to /etc/profile
# :saveas suda:/etc/profile
# ```
repo     = 'lambdalisue/suda.vim'
hook_add = '''
    let g:suda#prefix = 'sudo:'
'''
# on_* を使用していないので呼ばれない気がした
hook_post_source = '''
    call suda#init('sudo:*,sudo:*/*')
'''
