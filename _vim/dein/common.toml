[[plugins]]
# deinのinstallerで生成したvimrcで `Required` となっていたので追加
# 元々は以下
# "call dein#add('/home/USER/dotfiles/_vim/bundles/./repos/github.com/Shougo/dein.vim')
repo = 'Shougo/dein.vim'

[[plugins]]
repo  = 'Shougo/vimproc.vim'
build = 'make'


#--
# filer
#--

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo     = 'Shougo/defx.nvim'
depends  = ['kristijanhusak/defx-icons', 'kristijanhusak/defx-git']
hook_add = '''
    "TODO: 後でこれが出来るようにする
    " .から始まるファイルおよび.pycで終わるファイルを不可視パターンに
    "let g:vimfiler_ignore_pattern = "\%(^\..*\|\.pyc$\)"

    call defx#custom#option('_', {
                \ 'columns': 'indent:git:icons:filename',
                \ 'show_ignored_files': 0,
                \ })

    " -auto-cd: Change the working directory while navigating with defx.
    nnoremap <silent><C-e> :Defx -split=vertical -winwidth=35 -direction=topleft -auto-cd<CR>
    nnoremap <Leader>e     :Defx -split=vertical -winwidth=35 -direction=topleft -auto-cd<CR>

    " 現在のファイルがあるフォルダーを探索する
    " よさげなキーマップが見つかるまで放置
    "nnoremap ?             :Defx -split=vertical -winwidth=35 `expand('%:p:h')` -search=`expand('%:p')`<CR>

    " defxのみが開かれている時はdefxを自動的に閉じる
    autocmd MyAutoCmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'defx') | q | endif

    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>        defx#do_action('open')
        nnoremap <silent><buffer><expr> l           defx#do_action('open_or_close_tree')
        nnoremap <silent><buffer><expr> h           defx#do_action('close_tree')
        nnoremap <silent><buffer><expr> -           defx#do_action('open', 'split')
        nnoremap <silent><buffer><expr> s           defx#do_action('open', 'split')
        nnoremap <silent><buffer><expr> <Bar>       defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> v           defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P           defx#do_action('open', 'pedit')

        nnoremap <silent><buffer><expr> c           defx#do_action('copy')
        nnoremap <silent><buffer><expr> m           defx#do_action('move')
        nnoremap <silent><buffer><expr> p           defx#do_action('paste')

        nnoremap <silent><buffer><expr> K           defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N           defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M           defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C           defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
        nnoremap <silent><buffer><expr> S           defx#do_action('toggle_sort', 'time')
        nnoremap <silent><buffer><expr> d           defx#do_action('remove')
        nnoremap <silent><buffer><expr> r           defx#do_action('rename')
        nnoremap <silent><buffer><expr> !           defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x           defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy          defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .           defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> ;           defx#do_action('repeat')
        nnoremap <silent><buffer><expr> <BS>           defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~           defx#do_action('cd')
        nnoremap <silent><buffer><expr> q           defx#do_action('quit')
        nnoremap <silent><buffer><expr> <C-e>       defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Leader>e   defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space>     defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *           defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j           line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k           line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>       defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g>       defx#do_action('print')
        nnoremap <silent><buffer><expr> cd          defx#do_action('change_vim_cwd')

        " :drop 風に開く
        " 別のtabやwindowで開かれていた時はそっちにジャンプする
        nnoremap <silent><buffer><expr> <Leader><CR>
                    \ defx#do_action('drop')

        " windowのリサイズ
        nnoremap <silent><buffer><expr> > defx#do_action('resize',
                    \ defx#get_context().winwidth + 10)
        nnoremap <silent><buffer><expr> < defx#do_action('resize',
                    \ defx#get_context().winwidth - 10)
    endfunction
'''

#--
# vimfiler
#--


[[plugins]]
# http://postd.cc/how-to-boost-your-vim-productivity/#gfm-7
# > 3. 範囲拡大を使う
# > vを押して、1文字を選択する
# > もう1回vを押して、選択範囲を単語に拡大する
# > さらに1回vを押して、選択範囲を段落に拡大する
# > （以下省略）
# > 範囲を拡大しすぎた場合は、<C-v>を押して前回の選択範囲に戻す
repo     = 'terryma/vim-expand-region'
hook_add = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
# jsonのsyntax highlighting
# https://qiita.com/tomoemon/items/cc29b414a63e08cd4f89
repo = 'elzr/vim-json'

[[plugins]]
# markdownのテーブルや、インデントの開始位置を揃えてくれるやつ
# - markdownのテーブルの整形
#   :'<,'>Alignta |
# http://hamuhamu.hatenablog.jp/entry/2015/04/25/000246
repo = 'h1mesuke/vim-alignta'

[[plugins]]
# 'p'によるペースト後Ctrl-p,Ctrl-nで履歴と置き換え
repo = 'vim-scripts/YankRing.vim'

[[plugins]]
# 囲まれているものに対していろいろする
# 使ってない
#
# cs"'      - "foo" -> 'foo'
# ds"       - "foo" -> foo
# cs[{      - [foo] -> {foo}
repo = 'tpope/vim-surround'

[[plugins]]
# " を入力で "" を自動で入力する
repo = 'Townk/vim-autoclose'

[[plugins]]
# [vim-precious-の導入でtoml管理が快適に](https://qiita.com/kawaz/items/ee725f6214f91337b42b#vim-precious-%E3%81%AE%E5%B0%8E%E5%85%A5%E3%81%A7toml%E7%AE%A1%E7%90%86%E3%81%8C%E5%BF%AB%E9%81%A9%E3%81%AB)
# これの依存パッケージ
repo = 'Shougo/context_filetype.vim'

[[plugins]]
# > 現在のカーソル位置のコンテキストによって filetype を切り換える為のプラグインです。 - https://github.com/osyo-manga/vim-precious
#
# [vim-precious-の導入でtoml管理が快適に](https://qiita.com/kawaz/items/ee725f6214f91337b42b#vim-precious-%E3%81%AE%E5%B0%8E%E5%85%A5%E3%81%A7toml%E7%AE%A1%E7%90%86%E3%81%8C%E5%BF%AB%E9%81%A9%E3%81%AB)
# > toml の hook_* オプション内にカーソルがあるときだけ、set filetype=vim させることが出来る
repo = 'osyo-manga/vim-precious'
depends = ['/context_filetype.vim']


[[plugins]]
# Fキーの移動を楽にするやつ
# f で検索した後に、ffff で次の文字に移動する
# ! このプラギンがtキーを使っている
repo = 'rhysd/clever-f.vim'
hook_add = '''
    " 大文字と小文字を区別しない
    let g:clever_f_ignore_case = 1

    " 大文字を入力したときのみ大文字と小文字を区別する
    let g:clever_f_smart_case = 1

    " ローマ字読みで日本語を検索する
    let g:clever_f_use_migemo = 1

    " 常にfで前に移動、Fで後ろに移動する
    let g:clever_f_fix_key_direction = 1

    " プロンプトを表示させる(fを押した時に下に `clever-f:` と表示されるやつ)
    let g:clever_f_show_prompt = 1

    " ; キーを全ての記号キーとマッチさせる
    " なんかちゃんと動いてなさそう
    let g:clever_f_chars_match_any_signs = 1
'''


[[plugins]]
# :VimShell
# iexe python
# :VimShellInteractive python
# :VimShellSendString
repo = 'Shougo/vimshell.vim'
hook_add = '''
    " http://nauthiz.hatenablog.com/entry/20101107/1289140518

    " ,is: シェルを起動
    nnoremap <silent> ,is :VimShell<CR>

    " ,ipy: pythonを非同期で起動
    nnoremap <silent> ,ipy :VimShellInteractive python<CR>

    " ,irb: irbを非同期で起動
    nnoremap <silent> ,irb :VimShellInteractive irb<CR>

    " ,ss: 非同期で開いたインタプリタに現在の行を評価させる
    vmap <silent> ,ss :VimShellSendString<CR>

    " 選択中に,ss: 非同期で開いたインタプリタに選択行を評価させる
    nnoremap <silent> ,ss <S-v>:VimShellSendString<CR>
'''


[[plugins]]
# もし colorscheme molokai が not found になる場合は以下を試すこと
# :call dein#add('tomasr/molokai')
# :call dein#recache_runtimepath()
# そもそもplugin/ ディレクトリがないのでlazy出来ない？
# :help lazy に書いてある
repo     = 'tomasr/molokai'
#on_cmd   = ['colorscheme molokai', 'molokai']
hook_add = '''
    "highlight Normal ctermbg=none
    let g:rehash256 = 1
    let g:molokai_original = 1

    " molokai設定用
    command! Molokai call s:Molokai()
    function! s:Molokai()
        color molokai

        highlight IndentGuidesOdd ctermbg=237
        highlight IndentGuidesEven ctermbg=240
    endfunction
'''


[[plugins]]
# `:w sudo:%` でrootとして保存
# (`:w ! sudo tee %` が使えなくなったので代替手段)
# https://github.com/neovim/neovim/issues/8527
#
# ```
# " Open a current file with sudo
# :e suda:%
# " Save a current file with sudo
# :w suda:%
# " Edit /etc/sudoers
# :e suda:/etc/sudoers
# " Read /etc/sudoers (insert content under the cursor)
# :r suda:/etc/sudoers
# " Read /etc/sudoers at the end
# :$r suda:/etc/sudoers
# " Write contents to /etc/profile
# :w suda:/etc/profile
# " Save contents to /etc/profile
# :saveas suda:/etc/profile
# ```
repo     = 'lambdalisue/suda.vim'
hook_add = '''
    let g:suda#prefix = 'sudo:'
'''
# on_* を使用していないので呼ばれない気がした
hook_post_source = '''
    call suda#init('sudo:*,sudo:*/*')
'''


[[plugins]]
# インデントに色を付けて見やすくする
repo     = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_guide_size = 1
    let g:indent_guides_enable_on_vim_startup = 1
    "IndentGuidesEnable

    " https://github.com/nathanaelkane/vim-indent-guides/issues/33#issuecomment-285927535
    let indent_guides_auto_colors = 0
    let indent_guides_guide_size = 1
    " colorschema が設定するのでその後に設定しなきゃならない
    " (ここで設定しても意味がない)
    highlight IndentGuidesOdd ctermbg=237
    highlight IndentGuidesEven ctermbg=240
'''


[[plugins]]
# コメントを操作するプラギン
repo     = 'scrooloose/nerdcommenter'
hook_add = '''
    let NERDSpaceDelims = 1
    nmap ,, <Plug>NERDCommenterToggle
    vmap ,, <Plug>NERDCommenterToggle
    " 行の最後にコメントを追加
    nmap ,a <Plug>NERDCommenterAppend
    " カーソルの位置から行の最後までをコメントに変更
    nmap ,9 <Plug>NERDCommenterToEOL
    nmap ,s <Plug>NERDCommenterSexy
    vmap ,s <Plug>NERDCommenterSexy
    nmap ,b <Plug>NERDCommenterMinima
    vmap ,b <Plug>NERDCommenterMinima
'''


[[plugins]]
# 行末の不要な半角スペースを可視化
repo     = 'bronson/vim-trailing-whitespace'
hook_add = '''
    nmap d<TAB> :FixWhitespace<CR>
'''


[[plugins]]
# syntax checker
# syntastic から変えた, 非同期でやってくれる
#
# jsの場合はProjectで以下を実行する
# ```
# $ yarn add -D prettier-eslint-cli
# ```
#
repo     = 'w0rp/ale'
#build    = 'sudo pacman -S flake8'
hook_add = '''
    " ファイル保存時のみ実行
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 0
    " ファイルオープン時にチェックしない
    let g:ale_lint_on_enter = 0
    " ファイル保存時にFixerを実行
    let g:ale_fix_on_save = 1

    let g:ale_linters = {
    \   'python': ['flake8'],
    \   'javascript': ['eslint'],
    \   'typescript': ['tslint'],
    \   'go': ['gopls'],
    \ }
    let g:ale_fixers = {
    \   'python': ['black'],
    \   'javascript': ['eslint', 'prettier', 'prettier-eslint'],
    \   'typescript': ['tslint', 'prettier', 'prettier-eslint'],
    \   'css': ['prettier'],
    \ }
    let g:ale_python_flake8_executable = g:python3_host_prog
    let g:ale_python_flake8_options    = '-m flake8 --ignore=E203,E266,E501,W503 --max-line-length=80 --max-complexity=18 --select=B,C,E,F,W,T4,B9'
    let g:ale_python_black_executable  = g:python3_host_prog
    let g:ale_python_black_options     = '-m black'

    " TODO: 各環境のflake8とかeslintを使うようにする

    " ローカルの設定ファイルを考慮する
    let g:ale_javascript_prettier_use_local_config = 1

    let g:ale_typescript_tslint_use_global = 0
    let g:ale_typescript_tslint_config_path = expand("$HOME/.tslint.json")
'''


#--
# deoplete.nvim
#
# 補完
# - vimの場合は deoplete が nvim-yarp, vim-hug-neovim-rpc に依存する
# - nvim の場合は python-neovim に依存する
#   - build = 'pacman -S python-neovim'
#--

[[plugins]]
repo             = 'Shougo/deoplete.nvim'
#depends          = ['nvim-yarp', 'vim-hug-neovim-rpc']
#on_event         = 'InsertEnter'
hook_add = '''
    let g:deoplete#enable_at_startup = 1

    " 明示的に auto_complete を有効にする場合
    "let g:deoplete#custom#option({
    "            \ 'auto_complete': v:true,
    "})

    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ deoplete#manual_complete()
    function! s:check_back_space() abort "{{{
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction"}}}
'''

#[[plugins]]
#repo = 'roxma/nvim-yarp'

#[[plugins]]
# Depends: pacman/python-neovim
#repo = 'roxma/vim-hug-neovim-rpc'

#--
# End deoplete.nvim
#--


# JetBrains + nvim
# Brings JetBrains/IntelliJ IDEs magic to Neovim with minimal setup.
[[plugins]]
repo = 'beeender/Comrade'


[[plugins]]
# Dark powered shell interface for NeoVim and Vim8.
repo     = 'Shougo/deol.nvim'
hook_add = '''
    " terminalをfloatingで開く
    nnoremap <silent> <Leader>``     :Deol -split=floating<CR>
    " terminalをsplitで開く
    nnoremap <silent> <Leader>`-     :Deol -split=horizontal<CR>
    nnoremap <silent> <Leader>`s     :Deol -split=horizontal<CR>
    " terminalをvsplitで開く
    nnoremap <silent> <Leader>`<BAR> :Deol -split=vertical<CR>
    nnoremap <silent> <Leader>`v     :Deol -split=vertical<CR>

    " command mode
    tnoremap <ESC>   <C-\><C-n>
'''

