#--
# unite/denite系
#--

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo = 'Shougo/neoyank.vim'


[[plugins]]
repo     = 'Shougo/denite.nvim'
#build    = 'go get github.com/mattn/jvgrep'
hook_add = '''
    nnoremap [denite] <Nop>

    nmap <Leader>u  [denite]
    nmap <C-u>      [denite]

    nnoremap <silent> [denite]a     :Denite -split=floating file buffer     file:new<CR>
    nnoremap <silent> [denite]b     :Denite -split=floating buffer          file:new<CR>
    nnoremap <silent> [denite]c     :Denite -split=floating change          file:new<CR>
    nnoremap <silent> [denite]f     :Denite -split=floating file            file:new<CR>
    "nnoremap <silent> [denite]f     :Denite -split=floating defx/drive      file:new<CR>
    "nnoremap <silent> [denite]h     :Denite -split=floating help            file:new<CR>
    nnoremap <silent> [denite]h     :Denite -split=floating command_history         <CR>
    nnoremap <silent> [denite]i     :Denite -split=floating file_mru                <CR>
    nnoremap <silent> [denite]l     :Denite -split=floating line            file:new<CR>
    nnoremap <silent> [denite]m     :Denite -split=floating mark            file:new<CR>
    nnoremap <silent> [denite]r     :Denite -split=floating file/rec        file:new<CR>
    nnoremap <silent> [denite]t     :Denite -split=floating tag             file:new<CR>
    nnoremap <silent> [denite]u     :Denite -split=floating menu            file:new<CR>
    nnoremap <silent> [denite]y     :Denite -split=floating neoyank         file:new<CR>
    nnoremap <silent> <F5>          :Denite -split=floating menu:coc_lps<CR>

    nnoremap <silent> [denite]gg    :Denite           -split=floating grep    -buffer-name=search<CR>
    " カーソル位置の単語でgrep
    nnoremap <silent> [denite]g,    :DeniteCursorWord -split=floating grep    -buffer-name=search line<CR>
    " grep結果を再表示
    nnoremap <silent> [denite]gu    :Denite           -split=floating -resume -buffer-name=search<CR>

    nnoremap <silent> [denite]<C-a> :Denite -split=floating file buffer     file:new<CR>
    nnoremap <silent> [denite]<C-b> :Denite -split=floating buffer          file:new<CR>
    nnoremap <silent> [denite]<C-c> :Denite -split=floating change          file:new<CR>
    nnoremap <silent> [denite]<C-f> :Denite -split=floating file            file:new<CR>
    "nnoremap <silent> [denite]f     :Denite -split=floating defx/drive      file:new<CR>
    "nnoremap <silent> [denite]<C-h> :Denite -split=floating help            file:new<CR>
    nnoremap <silent> [denite]<C-h> :Denite -split=floating command_history         <CR>
    nnoremap <silent> [denite]<C-i> :Denite -split=floating file_mru                <CR>
    nnoremap <silent> [denite]<C-l> :Denite -split=floating line            file:new<CR>
    nnoremap <silent> [denite]<C-m> :Denite -split=floating mark            file:new<CR>
    nnoremap <silent> [denite]<C-r> :Denite -split=floating file/rec        file:new<CR>
    nnoremap <silent> [denite]<C-t> :Denite -split=floating tag             file:new<CR>
    nnoremap <silent> [denite]<C-u> :Denite -split=floating menu            file:new<CR>
    nnoremap <silent> [denite]<C-y> :Denite -split=floating neoyank         file:new<CR>
    nnoremap <silent> <F5>          :Denite -split=floating menu:coc_lps<CR>

    nnoremap <silent> [denite]<C-g><C-g> :Denite           -split=floating grep    -buffer-name=search<CR>
    "カーソル位置の単語でgrep
    nnoremap <silent> [denite]<C-g><C-,> :DeniteCursorWord -split=floating grep    -buffer-name=search line<CR>
    "grep結果を再表示
    nnoremap <silent> [denite]<C-g><C-u> :Denite           -split=floating -resume -buffer-name=search<CR>


    " floating
    "let s:denite_win_width_percent = 0.85
    "let s:denite_win_height_percent = 0.7
    "call denite#custom#option('default', {
    "            \ 'split': 'floating',
    "            \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    "            \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    "            \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    "            \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    "            \ })
    "


    " Define mappings
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
                    \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> d
                    \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
                    \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> <Esc>
                    \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> q
                    \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> i
                    \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space>
                    \ denite#do_map('toggle_select').'j'
        nnoremap <silent><buffer><expr> <BS>
                    \ denite#do_map('move_up_path')
        nnoremap <silent><buffer><expr> -
                    \ denite#do_map('do_action', 'split')
        nnoremap <silent><buffer><expr> s
                    \ denite#do_map('do_action', 'split')
        nnoremap <silent><buffer><expr> \|
                    \ denite#do_map('do_action', 'vsplit')
        nnoremap <silent><buffer><expr> v
                    \ denite#do_map('do_action', 'vsplit')
        nnoremap <silent><buffer><expr> t
                    \ denite#do_map('do_action', 'tabopen')
    endfunction

    autocmd FileType denite-filter call s:denite_filter_my_settings()
    function! s:denite_filter_my_settings() abort
        inoremap <silent><buffer> <C-o> <Plug>(denite_filter_quit)

        inoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
        nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
    endfunction

    " Change file/rec command.
    call denite#custom#var('file/rec', 'command',
                \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    " For ripgrep
    " Note: It is slower than ag
    call denite#custom#var('file/rec', 'command',
                \ ['rg', '--files', '--glob', '!.git'])
    " For Pt(the platinum searcher)
    " NOTE: It also supports windows.
    call denite#custom#var('file/rec', 'command',
                \ ['pt', '--follow', '--nocolor', '--nogroup',
                \  (has('win32') ? '-g:' : '-g='), ''])
    " For python script scantree.py
    " Read bellow on this file to learn more about scantree.py
    call denite#custom#var('file/rec', 'command',
                \ ['scantree.py', '--path', ':directory'])

    " Change matchers.
    call denite#custom#source(
                \ 'file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
    call denite#custom#source(
                \ 'file/rec', 'matchers', ['matcher/cpsm'])

    " Change sorters.
    call denite#custom#source(
                \ 'file/rec', 'sorters', ['sorter/sublime'])

    " Change default action.
    call denite#custom#kind('file', 'default_action', 'split')

    " Add custom menus
    let s:menus = {}

    let s:menus.shortcut = {
                \ 'description': 'shortcut'
                \ }
    let s:menus.shortcut.file_candidates = [
                \ ['memo', '~/memo.md'],
                \ ]

    let s:menus.zsh = {
                \ 'description': 'Edit your import zsh configuration'
                \ }
    let s:menus.zsh.file_candidates = [
                \ ['zshrc', '~/.config/zsh/.zshrc'],
                \ ['zshenv', '~/.zshenv'],
                \ ]

    let s:menus.my_commands = {
                \ 'description': 'Example commands'
                \ }
    let s:menus.my_commands.command_candidates = [
                \ ['Split the window', 'vnew'],
                \ ['Open zsh menu', 'Denite menu:zsh'],
                \ ['Format code', 'FormatCode', 'go,python'],
                \ ]


    " coc.nvim

    " `<Plug>(coc-.*)` のmapping
    "     https://github.com/neoclide/coc.nvim/blob/bd2a781f3b0e3fa0014583a7959b2d70392930c0/plugin/coc.vim#L346-L382

    " NOTE: LanguageClient_contextMenu()
    " 1) Type Definition
    " 2) Code Action
    " 3) Workspace Symbol
    " 4) Rename
    " 5) Definition
    " 6) References
    " 7) Formatting
    " 8) Range Formatting
    " 9) Document Highlight
    " 10) Signature Help
    " 11) Hover
    " 12) Document Symbol
    " 13) Implementation

    let s:menus.coc_menus = {
                \ 'description': 'coc menu'
                \ }
    let s:menus.coc_menus.command_candidates = [
                \ ['action.open', 'CocCommand actions.open'],
                \ ]

    let s:menus.coc_lps = {
                \ 'description': 'coc lsp'
                \ }
    let s:menus.coc_lps.command_candidates = [
                \ ['1)  Type Definition',    "call CocAction('jumpTypeDefinition')<CR>"],
                \ ['2)  Code Action',        "call CocActionAsync('codeAction', '')<CR>"],
                \ ['3)  Workspace Symbol',   ""],
                \ ['4)  Rename',             "call CocActionAsync('rename')<CR>"],
                \ ['5)  Definition',         "call CocAction('jumpDefinition')<CR>"],
                \ ['6)  References',         "call CocAction('jumpReferences')<CR>"],
                \ ['7)  Formatting',         "call CocActionAsync('format')<CR>"],
                \ ['8)  Range Formatting',   "call CocActionAsync('formatSelected', visualmode())<CR>"],
                \ ['9)  Document Highlight', ""],
                \ ['10) Signature Help',     ""],
                \ ['11) Hover',              ""],
                \ ['12) Document Symbol',    ""],
                \ ['13) Implementation',     "call CocAction('jumpImplementation')<CR>"],
                \ ['14) Declaration',        "call CocAction('jumpDeclaration')<CR>"],
                \ ]

    call denite#custom#var('menu', 'menus', s:menus)

    " Ag command on grep source
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
                \ ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    " Ack command on grep source
    call denite#custom#var('grep', 'command', ['ack'])
    call denite#custom#var('grep', 'default_opts',
                \ ['--ackrc', $HOME.'/.ackrc', '-H', '-i',
                \  '--nopager', '--nocolor', '--nogroup', '--column'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--match'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    " Ripgrep command on grep source
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts',
                \ ['-i', '--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    " Pt command on grep source
    call denite#custom#var('grep', 'command', ['pt'])
    call denite#custom#var('grep', 'default_opts',
                \ ['-i', '--nogroup', '--nocolor', '--smart-case'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    " jvgrep command on grep source
    call denite#custom#var('grep', 'command', ['jvgrep'])
    call denite#custom#var('grep', 'default_opts', ['-i'])
    call denite#custom#var('grep', 'recursive_opts', ['-R'])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', [])
    call denite#custom#var('grep', 'final_opts', [])

    " Specify multiple paths in grep source
    "call denite#start([{'name': 'grep',
    "      \ 'args': [['a.vim', 'b.vim'], '', 'pattern']}])

    " Define alias
    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command',
                \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#alias('source', 'file/rec/py', 'file/rec')
    call denite#custom#var('file/rec/py', 'command',
                \ ['scantree.py', '--path', ':directory'])

    " Change ignore_globs
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
                \ [ '.git/', '.ropeproject/', '__pycache__/',
                \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

    " Custom action
    " Note: lambda function is not supported in Vim8.
    call denite#custom#action('file', 'test',
                \ {context -> execute('let g:foo = 1')})
    call denite#custom#action('file', 'test2',
                \ {context -> denite#do_action(
                \  context, 'open', context['targets'])})
'''

