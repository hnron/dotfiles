[[plugins]]
# tree表示にするプラグイン
# :List2tree
#
# これが
# * .
#   * hoge
#   * huga
#     * piyo
#
# こうなる
# .
# ├── hoge
# └── huga
#     └── piyo
repo = 'shinespark/vim-list2tree'
on_cmd = ['List2Tree']


[[plugins]]
# toml の syntax highlighting
repo  = 'cespare/vim-toml'
on_ft = ['toml']


[[plugins]]
# Goの構造体とかを行分割したり結合したりしてくれるやつ, struct
# gS    -> 分割
# gJ    -> 結合
repo   = 'AndrewRadev/splitjoin.vim'
on_map = ['gS', 'gJ']


[[plugins]]
# :UpdPkgSums or :UPS     -> updpkgsums
# :MkAurBall or :MAB      -> mkaurball
# :MkAurBallForce or :MAF -> mkaurball -f
repo  = 'Firef0x/PKGBUILD.vim'
on_ft = ['PKGBUILD']


[[plugins]]
# Gundo.vimによる高機能アンドゥ実装
repo        = 'sjl/gundo.vim'
# 必須, こっち側で読み込む
on_map      = ['<Leader>g']
# hook_source が呼ばれる前なのでこっちはあまり意味ない
# `:GundoToggle` を直で叩いた時用
on_cmd      = ['GundoToggle']
hook_source = '''
    nnoremap <Leader>g :GundoToggle<CR>
'''


[[plugins]]
# TaskList.vim ToDo管理
# 使ってない
repo        = 'vim-scripts/TaskList.vim'
# 必須, こっち側で読み込む
on_map      = ['<Leader>T']
# hook_source が呼ばれる前なのでこっちはあまり意味ない
on_cmd      = ['TaskList']
hook_source = '''
    nmap <Leader>T <plug>TaskList
'''


[[plugins]]
# quickrunによる即時実行
repo        = 'thinca/vim-quickrun'
on_map      = ['<Leader>r']
on_cmd      = ['QuickRun']
hook_source = '''
    nmap <Leader>r <Plug>(quickrun)
    let g:quickrun_config = {"*": {"runner": "vimproc"}}
'''


[[plugins]]
# 使ってない
# vimshellが必要っぽいけどnvimだとどうなんだ？
repo        = 'ujihisa/repl.vim'
on_map      = ['[wLeader]r']
on_event    = ['InsertEnter']
hook_source = '''
    nmap <silent> [wLeader]r :Repl<CR>
'''


[[plugins]]
# Tarbarによるクラスアウトライン
repo        = 'majutsushi/tagbar'
build       = ['pacman -S ctags']
on_map      = ['<Leader>t']
on_cmd      = ['TagbarToggle']
hook_source = '''
    nmap <Leader>t :TagbarToggle<CR>
    " Exuberant ctags必須
'''


[[plugins]]
# Snippet
repo        = 'Shougo/neosnippet.vim'
on_event    = ['InsertEnter']
# hook_post_sourceの方が良い？
hook_source = '''
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
        set conceallevel=2 concealcursor=niv
    endif

    " Enable snipMate compatibility feature.
    let g:neosnippet#enable_snipmate_compatibility = 1
    " Tell Neosnippet about the other snippets
    let g:neosnippet#snippets_directory='~/.cache/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets,~/.vim/snippets'
'''


[[plugins]]
repo      = 'Shougo/neosnippet-snippets'
on_source = ['neosnippet.vim']

