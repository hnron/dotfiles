---
#- name: pyenv | install required packages
#  package:
#    name: "{{ item }}"
#    state: present
#    #update_cache: yes
#  become: yes
#  loop:
#    - openssl-1.0
#  when:
#    - ansible_distribution == "Archlinux"

- name: pyenv | install pyenv
  git:
    repo: https://github.com/pyenv/pyenv.git
    dest: ~/.pyenv

- name: pyenv | install pyenv-virtualenv
  git:
    repo: https://github.com/pyenv/pyenv-virtualenv.git
    dest: ~/.pyenv/plugins/pyenv-virtualenv


- block: # version

  # 指定したversionのうち、未インストールのものをリストにする
  - name: pyenv | register specified python that is not installed
    # exit code操作のためにuniqに渡している
    shell: "pyenv versions --bare --skip-aliases | grep '^{{ item.version }}$' | uniq"
    register: result
    changed_when: result.stdout == ''
    check_mode: no
    loop:
      "{{ pyenv }}"

  # pyenv install -s だと changed になるので回避
  - name: pyenv | install python by pyenv
    shell: "pyenv install {{ item.item.version }}"
    environment:
      CFLAGS: "-I/usr/include/openssl-1.0"
      LDFLAGS: "-L/usr/lib64/openssl-1.0"
    when: item.stdout == ''
    loop:
      "{{ result.results }}"


- block: # virtualenv
  # nodenvのaliasの張り直しとは違い、-fでvirtualenvを作成するとぶっ壊れたので一度削除している

  # 現在はvirtualenvのpythonのバージョンと、指定したバージョンが違う時のみchangedにしている
  # そもそもインストールされていない場合はokにしている
  # Example: result.stdout == 3.7.2 (<- nvim3のpythonのversion, 未インストールなら '' になる)
  - name: pyenv | check the python version used in the specified virtualenv
    shell: "pyenv virtualenvs --bare --skip-aliases | grep {{ item.virtualenv }} | cut -f1 -d'/'"
    register: result
    changed_when: (item.version != result.stdout) and result.stdout != ''
    check_mode: no
    loop:
      "{{ pyenv }}"

  # 前の結果からpythonのバージョン違いのものだけを削除する
  - name: pyenv | delete virtualenv different from the specified version
    shell: "pyenv virtualenv-delete -f {{ item.item.virtualenv }}"
    when: (item.item.version != item.stdout) and item.stdout != ''
    loop:
      "{{ result.results }}"

  # 未インストールのvirtualenvを取得
  # Example: result.stdout == neovim3 (未インストールなら '' になる)
  - name: pyenv | check for not installed version
    # exit code操作のためにuniqに渡している
    shell: "pyenv virtualenvs --bare --skip-aliases | cut -f3 -d'/' | grep '^{{ item.virtualenv }}$' | uniq"
    register: result
    changed_when: result.stdout == ''
    check_mode: no
    loop:
      "{{ pyenv }}"

  # pyenv virtualenv -f だと changed になるので回避
  - name: pyenv | create virtualenv
    shell: "pyenv virtualenv {{ item.item.version }} {{ item.item.virtualenv }}"
    when: item.stdout == ''
    loop:
      "{{ result.results }}"

#- name: pyenv | pip install
#  pip:
#    name: "{{ item.packages }}"
#    executable: ~/.pyenv/versions/neovim3/bin/pip
#  loop:
#    "{{ pyenv }}"

- name: pyenv | pip install
  pip:
    name: "{{ item.packages }}"
    executable: ~/.pyenv/shims/pip
    state: latest
  environment:
    PYENV_VERSION: "{{ item.virtualenv }}"
  loop:
    "{{ pyenv }}"

